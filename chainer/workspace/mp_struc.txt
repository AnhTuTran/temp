Help on package micpy:

NAME
    micpy

FILE
    /home/svtttn_mrhung/AnhTuTran/chainer/lib/python2.7/site-packages/micpy/__init__.py

PACKAGE CONTENTS
    multiarray
    numeric
    random (package)
    shape_base
    umath
    util

CLASSES
    __builtin__.object
        ndarray
    
    class ndarray(__builtin__.object)
     |  Methods defined here:
     |  
     |  __abs__(...)
     |      x.__abs__() <==> abs(x)
     |  
     |  __add__(...)
     |      x.__add__(y) <==> x+y
     |  
     |  __and__(...)
     |      x.__and__(y) <==> x&y
     |  
     |  __copy__(...)
     |  
     |  __deepcopy__(...)
     |  
     |  __div__(...)
     |      x.__div__(y) <==> x/y
     |  
     |  __divmod__(...)
     |      x.__divmod__(y) <==> divmod(x, y)
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __float__(...)
     |      x.__float__() <==> float(x)
     |  
     |  __floordiv__(...)
     |      x.__floordiv__(y) <==> x//y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __hex__(...)
     |      x.__hex__() <==> hex(x)
     |  
     |  __iadd__(...)
     |      x.__iadd__(y) <==> x+=y
     |  
     |  __iand__(...)
     |      x.__iand__(y) <==> x&=y
     |  
     |  __idiv__(...)
     |      x.__idiv__(y) <==> x/=y
     |  
     |  __ifloordiv__(...)
     |      x.__ifloordiv__(y) <==> x//=y
     |  
     |  __ilshift__(...)
     |      x.__ilshift__(y) <==> x<<=y
     |  
     |  __imod__(...)
     |      x.__imod__(y) <==> x%=y
     |  
     |  __imul__(...)
     |      x.__imul__(y) <==> x*=y
     |  
     |  __index__(...)
     |      x[y:z] <==> x[y.__index__():z.__index__()]
     |  
     |  __int__(...)
     |      x.__int__() <==> int(x)
     |  
     |  __invert__(...)
     |      x.__invert__() <==> ~x
     |  
     |  __ior__(...)
     |      x.__ior__(y) <==> x|=y
     |  
     |  __ipow__(...)
     |      x.__ipow__(y) <==> x**=y
     |  
     |  __irshift__(...)
     |      x.__irshift__(y) <==> x>>=y
     |  
     |  __isub__(...)
     |      x.__isub__(y) <==> x-=y
     |  
     |  __itruediv__(...)
     |      x.__itruediv__(y) <==> x/=y
     |  
     |  __ixor__(...)
     |      x.__ixor__(y) <==> x^=y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __long__(...)
     |      x.__long__() <==> long(x)
     |  
     |  __lshift__(...)
     |      x.__lshift__(y) <==> x<<y
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __mod__(...)
     |      x.__mod__(y) <==> x%y
     |  
     |  __mul__(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __neg__(...)
     |      x.__neg__() <==> -x
     |  
     |  __nonzero__(...)
     |      x.__nonzero__() <==> x != 0
     |  
     |  __oct__(...)
     |      x.__oct__() <==> oct(x)
     |  
     |  __or__(...)
     |      x.__or__(y) <==> x|y
     |  
     |  __pos__(...)
     |      x.__pos__() <==> +x
     |  
     |  __pow__(...)
     |      x.__pow__(y[, z]) <==> pow(x, y[, z])
     |  
     |  __radd__(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  __rand__(...)
     |      x.__rand__(y) <==> y&x
     |  
     |  __rdiv__(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  __rdivmod__(...)
     |      x.__rdivmod__(y) <==> divmod(y, x)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __rfloordiv__(...)
     |      x.__rfloordiv__(y) <==> y//x
     |  
     |  __rlshift__(...)
     |      x.__rlshift__(y) <==> y<<x
     |  
     |  __rmod__(...)
     |      x.__rmod__(y) <==> y%x
     |  
     |  __rmul__(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  __ror__(...)
     |      x.__ror__(y) <==> y|x
     |  
     |  __rpow__(...)
     |      y.__rpow__(x[, z]) <==> pow(x, y[, z])
     |  
     |  __rrshift__(...)
     |      x.__rrshift__(y) <==> y>>x
     |  
     |  __rshift__(...)
     |      x.__rshift__(y) <==> x>>y
     |  
     |  __rsub__(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  __rtruediv__(...)
     |      x.__rtruediv__(y) <==> y/x
     |  
     |  __rxor__(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  __sizeof__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __sub__(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  __truediv__(...)
     |      x.__truediv__(y) <==> x/y
     |  
     |  __xor__(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  all(...)
     |  
     |  any(...)
     |  
     |  argmax(...)
     |  
     |  argmin(...)
     |  
     |  astype(...)
     |  
     |  copy(...)
     |  
     |  dot(...)
     |  
     |  fill(...)
     |  
     |  max(...)
     |  
     |  mean(...)
     |  
     |  min(...)
     |  
     |  prod(...)
     |  
     |  ravel(...)
     |  
     |  reshape(...)
     |  
     |  resize(...)
     |  
     |  setflags(...)
     |  
     |  sum(...)
     |  
     |  to_cpu(...)
     |  
     |  transpose(...)
     |  
     |  view(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  T
     |  
     |  __array_finalize__
     |  
     |  __array_priority__
     |  
     |  base
     |  
     |  device
     |  
     |  dtype
     |  
     |  flags
     |  
     |  imag
     |  
     |  itemsize
     |  
     |  nbytes
     |  
     |  ndim
     |  
     |  real
     |  
     |  shape
     |  
     |  size
     |  
     |  strides
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T

FUNCTIONS
    array(...)
    
    copyto(...)
    
    count_nonzero(...)
    
    device(...)
    
    dot(...)
    
    empty(...)
    
    empty_like(...)
    
    ones(...)
    
    ones_like(...)
    
    set_device(...)
    
    to_cpu(...)
    
    to_mic(...)
    
    vdot(...)
    
    zeros(...)
    
    zeros_like(...)

DATA
    ALLOW_THREADS = 1
    BUFSIZE = 8192
    CLIP = 0
    ERR_CALL = 3
    ERR_DEFAULT = 521
    ERR_IGNORE = 0
    ERR_LOG = 5
    ERR_PRINT = 4
    ERR_RAISE = 2
    ERR_WARN = 1
    FLOATING_POINT_SUPPORT = 1
    FPE_DIVIDEBYZERO = 1
    FPE_INVALID = 8
    FPE_OVERFLOW = 2
    FPE_UNDERFLOW = 4
    ITEM_HASOBJECT = 1
    ITEM_IS_POINTER = 4
    LIST_PICKLE = 2
    MAXDIMS = 32
    NEEDS_INIT = 8
    NEEDS_PYAPI = 16
    RAISE = 2
    SHIFT_DIVIDEBYZERO = 0
    SHIFT_INVALID = 9
    SHIFT_OVERFLOW = 3
    SHIFT_UNDERFLOW = 6
    UFUNC_BUFSIZE_DEFAULT = 8192
    UFUNC_PYVALS_NAME = 'UFUNC_PYVALS'
    WRAP = 1
    __MICPY_SETUP__ = False
    absolute = <mufunc 'absolute'>
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    add = <mufunc 'add'>
    arccos = <mufunc 'arccos'>
    arccosh = <mufunc 'arccosh'>
    arcsin = <mufunc 'arcsin'>
    arcsinh = <mufunc 'arcsinh'>
    arctan = <mufunc 'arctan'>
    arctan2 = <mufunc 'arctan2'>
    arctanh = <mufunc 'arctanh'>
    bitwise_and = <mufunc 'bitwise_and'>
    bitwise_or = <mufunc 'bitwise_or'>
    bitwise_xor = <mufunc 'bitwise_xor'>
    cbrt = <mufunc 'cbrt'>
    ceil = <mufunc 'ceil'>
    conj = <mufunc 'conjugate'>
    conjugate = <mufunc 'conjugate'>
    copysign = <mufunc 'copysign'>
    cos = <mufunc 'cos'>
    cosh = <mufunc 'cosh'>
    deg2rad = <mufunc 'deg2rad'>
    degrees = <mufunc 'degrees'>
    divide = <mufunc 'divide'>
    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192...
    divmod = <mufunc 'divmod'>
    equal = <mufunc 'equal'>
    exp = <mufunc 'exp'>
    exp2 = <mufunc 'exp2'>
    expm1 = <mufunc 'expm1'>
    fabs = <mufunc 'fabs'>
    float_power = <mufunc 'float_power'>
    floor = <mufunc 'floor'>
    floor_divide = <mufunc 'floor_divide'>
    fmax = <mufunc 'fmax'>
    fmin = <mufunc 'fmin'>
    fmod = <mufunc 'fmod'>
    frexp = <mufunc 'frexp'>
    greater = <mufunc 'greater'>
    greater_equal = <mufunc 'greater_equal'>
    heaviside = <mufunc 'heaviside'>
    hypot = <mufunc 'hypot'>
    invert = <mufunc 'invert'>
    isfinite = <mufunc 'isfinite'>
    isinf = <mufunc 'isinf'>
    isnan = <mufunc 'isnan'>
    isnat = <mufunc 'isnat'>
    ldexp = <mufunc 'ldexp'>
    left_shift = <mufunc 'left_shift'>
    less = <mufunc 'less'>
    less_equal = <mufunc 'less_equal'>
    log = <mufunc 'log'>
    log10 = <mufunc 'log10'>
    log1p = <mufunc 'log1p'>
    log2 = <mufunc 'log2'>
    logaddexp = <mufunc 'logaddexp'>
    logaddexp2 = <mufunc 'logaddexp2'>
    logb = <mufunc 'logb'>
    logical_and = <mufunc 'logical_and'>
    logical_not = <mufunc 'logical_not'>
    logical_or = <mufunc 'logical_or'>
    logical_xor = <mufunc 'logical_xor'>
    maximum = <mufunc 'maximum'>
    minimum = <mufunc 'minimum'>
    mod = <mufunc 'remainder'>
    modf = <mufunc 'modf'>
    multiply = <mufunc 'multiply'>
    ndevices = 2
    negative = <mufunc 'negative'>
    nextafter = <mufunc 'nextafter'>
    not_equal = <mufunc 'not_equal'>
    positive = <mufunc 'positive'>
    power = <mufunc 'power'>
    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...
    rad2deg = <mufunc 'rad2deg'>
    radians = <mufunc 'radians'>
    reciprocal = <mufunc 'reciprocal'>
    remainder = <mufunc 'remainder'>
    right_shift = <mufunc 'right_shift'>
    rint = <mufunc 'rint'>
    sign = <mufunc 'sign'>
    signbit = <mufunc 'signbit'>
    sin = <mufunc 'sin'>
    sinh = <mufunc 'sinh'>
    spacing = <mufunc 'spacing'>
    sqrt = <mufunc 'sqrt'>
    square = <mufunc 'square'>
    subtract = <mufunc 'subtract'>
    tan = <mufunc 'tan'>
    tanh = <mufunc 'tanh'>
    true_divide = <mufunc 'true_divide'>
    trunc = <mufunc 'trunc'>


None
